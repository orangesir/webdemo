java想不到的运行结果9-transient失效

关键词transient使用频率不是太高。但是大家都知道它的作用是为了帮助某个成员变量逃过序列化。

来个简单的例子:
package com.orangesir;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.Serializable;

class Data1 implements Serializable{
    public String user1 = "no transient1";
    public transient String user2 = "no transient2";
}

class Test1 {

    public static void main(String[] args) {
        Data1 data1 = new Data1();
        data1.user1 = "transient1";
        data1.user2 = "transient2";

        File file = new File("data1.file");
        if(!file.isFile()) {
            try {
                file.createNewFile();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        //存入对象
        try {
            OutputStream outputStream = new FileOutputStream(file);
            ObjectOutputStream objectOutputStream = new ObjectOutputStream(outputStream);
            objectOutputStream.writeObject(data1);
            objectOutputStream.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }

        //取出对象
        try {
            InputStream inputStream = new FileInputStream(file);
            ObjectInputStream objectInputStream = new ObjectInputStream(inputStream);
            Data1 data1back = (Data1) objectInputStream.readObject();
            System.out.println(data1back.user1);
            System.out.println(data1back.user2);
        } catch (IOException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }

    }
}
运行结果:
transient1
null
一切都很和谐。user1被序列化了，user2没有被序列化。

但是有时候transient失效了:
下面是demo：
User类:
package com.orangesir;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

public class User implements Externalizable {

    private transient String username = "orangesir";

    private String username1 = "orangesir1";

    public String getUsername1() {
        return username1;
    }

    public void setUsername1(String username1) {
        this.username1 = username1;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public void writeExternal(ObjectOutput out) throws IOException {
        out.writeObject(username);
    }

    public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
        username = (String) in.readObject();
    }
}
App执行类:
package com.orangesir;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;

public class App
{
    public static void main( String[] args )
    {
        User user = new User();
        user.setUsername("no-orangesir");
        user.setUsername1("no-orangesir1");

        File file = new File("setuser.file");
        if(!file.isFile()) {
            try {
                file.createNewFile();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        //存入对象
        try {
            OutputStream outputStream = new FileOutputStream(file);
            ObjectOutputStream objectOutputStream = new ObjectOutputStream(outputStream);
            objectOutputStream.writeObject(user);
            objectOutputStream.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }

        //取出对象
        try {
            InputStream inputStream = new FileInputStream(file);
            ObjectInputStream objectInputStream = new ObjectInputStream(inputStream);
            User user1 = (User) objectInputStream.readObject();
            System.out.println(user1.getUsername());
            System.out.println(user1.getUsername1());
        } catch (IOException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }

    }
}
运行结果:
no-orangesir
orangesir1
可以看到:User的两个成员变量，transient标记的成员变量反而被序列化了。
这是为什么呢？
原来ObjectOutputStream的1429行有下列代码:
if (desc.isExternalizable() && !desc.isProxy()) {
    writeExternalData((Externalizable) obj);
} else {
    writeSerialData(obj, desc);
}
Externalizable这个接口的类是做了特别处理的。它需要自己在实现类时候分表在writeExternal，readExternal中写序列化与反序列化。
所以transient在Externalizable里面就没有作用了。
